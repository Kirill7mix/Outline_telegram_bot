import sqlite3 # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
from conf import api_url, cert_sha256, PAYMENTS_PROVIDER_TOKEN
from aiogram import Bot, Dispatcher, F, Router, types #AIOGRAM????
from aiogram.types import LabeledPrice, PreCheckoutQuery, InlineKeyboardButton, InlineKeyboardMarkup #AIOGRAM????
from aiogram.methods import SendInvoice, AnswerPreCheckoutQuery #AIOGRAM????
from aiogram.types import Message, CallbackQuery #AIOGRAM????
from aiogram.filters import CommandStart #AIOGRAM????
from datetime import datetime, timedelta #–í—Ä–µ–º—è
import requests # –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, –≤—Ä–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö–∑ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
import os #–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏.
import time #–í—Ä–µ–º—è, –Ω–æ –¥—Ä—É–≥–æ–µ
from aiogram.types import FSInputFile # –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
from colorama import Fore, Back, Style, init # –ë–æ–ª–µ–µ —á—ë—Ç–∫–∏–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
from outline_vpn.outline_vpn import OutlineVPN # API outline, –Ω—Å–∫–æ–ª—å–∫–æ —è –ø–æ–º–Ω—é, –Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ.
import app.keyboards as kb # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞

client = OutlineVPN(api_url=api_url, cert_sha256=cert_sha256)

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ. –¢–æ—á–Ω–µ–µ –µ—ë –≥–æ–¥–Ω–æ—Å—Ç—å.
def check_subscription(user_id: int):
    conn = sqlite3.connect('bot_users.db')  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    cursor.execute("SELECT vpn_expiration FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    
    conn.close()
    
    if result and result[0]:
        vpn_expiration = result[0]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ –æ–±—ä–µ–∫—Ç datetime
        vpn_expiration_date = datetime.strptime(vpn_expiration, '%Y-%m-%d %H:%M:%S')
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        if vpn_expiration_date > datetime.now():
            return vpn_expiration_date
    
    return None

@router.message(CommandStart())
async def check(message: Message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã.
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        name TEXT,
        date_registration TEXT,
        vpn_token TEXT,
        vpn_expiration TEXT,
        key_id TEXT
    )
    ''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü key_id –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'key_id' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN key_id TEXT")

    conn.commit()

    user_id = message.from_user.id
    user_name = message.from_user.full_name

    key_id= f"New{message.from_user.id} key"

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞

    if user:
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!", reply_markup=kb.main)
        print(f"{Fore.LIGHTYELLOW_EX}–ü—Ä–æ–∂–∞–ª–∏ —Å—Ç–∞—Ä—Ç. {Style.RESET_ALL}{datetime.now()}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO users (id, name, date_registration, key_id) VALUES (?, ?, ?, ?)", 
                       (user_id, user_name, registration_date, key_id))
        conn.commit()
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n<tg-spoiler>–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.</tg-spoiler>",
            reply_markup=kb.main,
            parse_mode='HTML'
        )

        print(f"{Fore.LIGHTYELLOW_EX}–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! {Style.RESET_ALL}{datetime.now()}")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VPN —Ç–æ–∫–µ–Ω–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
async def update_vpn(user_id: int, vpn_token: str):
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ VPN –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
    vpn_expiration = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")

    cursor.execute("UPDATE users SET vpn_token=?, vpn_expiration=? WHERE id=?", 
                   (vpn_token, vpn_expiration, user_id))
    conn.commit()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()

    user_id = message.from_user.id

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT name, vpn_token, vpn_expiration FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user:
        print(f"{Fore.LIGHTYELLOW_EX}–ü—Ä–æ–∂–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å. {Style.RESET_ALL}{datetime.now()}")
        name, vpn_token, vpn_expiration = user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        vpn_token_info = vpn_token if vpn_token else "–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç"
        vpn_expiration_info = vpn_expiration if vpn_expiration else "–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç"

        profile_info = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
            f"üìõ <b>–ò–º—è:</b> {name}\n"
            f"üîë <b>VPN –¢–æ–∫–µ–Ω:\n</b> <code>{vpn_token_info}</code>\n"
            f"‚è≥ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è VPN:\n</b> {vpn_expiration_info}\n"
            f"–í—Ä–µ–º—è –±–æ—Ç–∞: {datetime.now()}"
        )
    else:
        profile_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        print(f"{Fore.LIGHTRED_EX}ERR –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å, –∫–∞–∂–µ—Ç—Å—è –µ–≥–æ –Ω–µ—Ç—É –≤ –±–∞–∑–µ. {Style.RESET_ALL} {datetime.now()}")

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
    image_url = "https://i.pinimg.com/736x/fe/e6/ea/fee6ea2ac749a0dbcf92027912d40380.jpg"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer_photo(photo=image_url, caption=profile_info, parse_mode='HTML', reply_markup=kb.profile)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ"
@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ")
async def token_info(message: types.Message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()

    user_id = message.from_user.id

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ VPN —Ç–æ–∫–µ–Ω–µ –∏ —Å—Ä–æ–∫–µ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    cursor.execute("SELECT vpn_token, vpn_expiration FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user:
        print(f"{Fore.LIGHTYELLOW_EX}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–µ–ª –∏–Ω—Ñ–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. {Style.RESET_ALL}{datetime.now()}")
        vpn_token, vpn_expiration = user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        vpn_token_info = vpn_token if vpn_token else "–ù–ï–¢–£"
        vpn_expiration_info = vpn_expiration if vpn_expiration else "–ù–ï–¢–£"

        token_message = (
            f"üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º VPN —Ç–æ–∫–µ–Ω–µ</b>\n\n"
            f"üîì <b>–¢–æ–∫–µ–Ω:\n</b> <code>{vpn_token_info}</code>\n"
            f"‚è≥ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {vpn_expiration_info}\n\n"
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        if vpn_token:  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="delete_token")]
            ])
        else:
            keyboard = None  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è

    else:
        token_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–∂–º–∏ /start"
        print(f"{Fore.LIGHTRED_EX}ERR –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ –æ —Ç–æ–∫–µ–Ω–µ, –∫–∞–∂–µ—Ç—Å—è –µ–≥–æ –Ω–µ—Ç—É –≤ –±–∞–∑–µ. {Style.RESET_ALL} {datetime.now()}")
        keyboard = None  # –ö–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç

    await message.answer(token_message, parse_mode='HTML', reply_markup=keyboard)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@router.callback_query(F.data == "delete_token")
async def confirm_delete_token(callback_query: CallbackQuery):
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="confirm_delete_token"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_delete_token")
        ]
    ])

    await callback_query.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à VPN —Ç–æ–∫–µ–Ω?",
        reply_markup=confirm_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@router.callback_query(F.data == "confirm_delete_token")
async def delete_token(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è VPN —Ç–æ–∫–µ–Ω–∞
    cursor.execute("UPDATE users SET vpn_token=NULL, vpn_expiration=NULL WHERE id=?", (user_id,))
    conn.commit()

    # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å
    # Delete it
    client.delete_key(f"New{user_id} key")
    # -----

    print(f"{Fore.LIGHTYELLOW_EX}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–≤–æ–π VPN —Ç–æ–∫–µ–Ω. {Style.RESET_ALL}{datetime.now()}")

    await callback_query.message.edit_text(
        "–í–∞—à VPN —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
        reply_markup=None
    )

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@router.callback_query(F.data == "cancel_delete_token")
async def cancel_delete_token(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ VPN —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )

@router.message(F.text == "–ö—É–ø–∏—Ç—å –≤–ø–Ω")
async def show_tariff_plans(message: Message):
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    active_subscription_date = check_subscription(user_id)
    
    if active_subscription_date:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {active_subscription_date}.")
        print(f"{Fore.LIGHTYELLOW_EX}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –æ–Ω–∞ —É–∂–µ –∏–º–µ–µ—Ç—Å—è. {Style.RESET_ALL}{datetime.now()}")
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω", reply_markup=kb.buy_button)
        print(f"{Fore.LIGHTYELLOW_EX}–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏! {Style.RESET_ALL}{datetime.now()}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
@router.callback_query(F.data == "buy_vpn_1_month")
async def process_buy_vpn(callback_query: CallbackQuery):
    prices = [LabeledPrice(label="VPN –Ω–∞ 1 –º–µ—Å—è—Ü", amount=15000)]  # 15000 –∫–æ–ø–µ–µ–∫ = 150 —Ä—É–±–ª–µ–π
    
    await callback_query.message.answer_invoice(
        title="VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
        description="–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü.",
        payload="vpn_1_month",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        provider_token=PAYMENTS_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="vpn-monthly-subscription",
        photo_url="https://hotmart.s3.amazonaws.com/product_pictures/b821dd11-84ab-4b5e-9bfa-a4e7a26608c4/1mo.png",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
        photo_width=512,
        photo_height=512,
        photo_size=512
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂
    await pre_checkout_query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    user_id = message.from_user.id
    key = client.create_key(
        key_id=f"New{message.from_user.id} key",
        name=f"BOT-(@{message.from_user.username} ID-({message.from_user.id}) NAME-({message.from_user.full_name}))"
    )

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ access_url –∏–∑ –æ–±—ä–µ–∫—Ç–∞ vpn_key
    vpn_token = key.access_url
    print(key)
    print(vpn_token)
    
    vpn_expiration = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")

    key_id=f"New{message.from_user.id} key"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET vpn_token=?, vpn_expiration=?, key_id=? WHERE id=?", 
                   (vpn_token, vpn_expiration, key_id, user_id))
    conn.commit()
    conn.close()
    print(f"{Fore.GREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É! {Style.RESET_ALL}{datetime.now()}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n–í–∞—à VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {vpn_expiration}.\n–í–∞—à —Ç–æ–∫–µ–Ω:\n<code>{vpn_token}</code>",
        parse_mode='HTML'
    )

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def exitt(message: Message):
  await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é.', reply_markup=kb.main)

@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def exitt(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å –≤ –±–æ—Ç–∞.\n–ë–æ—Ç: \n||–û–Ω –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–≤–∏–∂—É, –æ—Ç–≤–µ—á—É.||")
    print(f"{Fore.LIGHTYELLOW_EX}–ù–∞–∂–∞–ª–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É. {Style.RESET_ALL}{datetime.now()}")
